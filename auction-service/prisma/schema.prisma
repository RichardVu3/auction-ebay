// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auction {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  description   String?
  published Boolean  @default(false)
  starting_amount Decimal @db.Money
  start_time DateTime @default(now()) @db.Timestamp(3)
  end_time DateTime @default(now()) @db.Timestamp(3)
  sellerId  Int
  // User      User     @relation(fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

// model Category {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   userId Int     @unique
//   User   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   name    String?  @db.VarChar(255)
//   email   String   @unique @db.VarChar(255)
//   Auction    Auction[]
// }

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
