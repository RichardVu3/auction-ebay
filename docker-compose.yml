services:
  ### DATABASES
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d/:ro
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  mongodb:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s


  rabbitmq:
    image: masstransit/rabbitmq
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./initmq/definitions.json:/etc/rabbitmq/definitions:ro
    networks:
      - app-network

  ### APIS
  auction-service:
    build:
      context: ./auction-service
      dockerfile: Dockerfile
    container_name: auction-service
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres-db:5432/auction_service_db"
      RABBITMQ_HOST: "rabbitmq"
      ADMIN_USERID: "c1bba5c0-b001-7085-7a2e-e74d5399c3d1"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "localhost:4000/healthcheck"]
    networks:
      - app-network

  notification-service:
    restart: always
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "4001:4001"
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres-db:5432/notification_service_db"
      RABBITMQ_HOST: "rabbitmq"
    env_file:
      - ./notification-service/.env
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "localhost:4001/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  api-gateway:
    restart: always
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "42069:42069"
    healthcheck:
      test: ["CMD", "curl", "localhost:42069/healthcheck"]
    depends_on:
      auction-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  user-service:
    build:
      context: ./userService
    container_name: user-service
    depends_on:
      postgres-db:
        condition: service_healthy
    ports:
      - 8080:8080
    entrypoint:
      ["java", "-jar", "-Dspring.profiles.active=docker", "application.jar"]
    networks:
      - app-network

  cart_mongodb:
    build:
      context: shopping-cart/mongodb/
      dockerfile: Dockerfile
    container_name: cart_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
        test: ["CMD-SHELL", "pgrep mongod > /dev/null || exit 1"]
        interval: 10s
        timeout: 10s
        retries: 10
    networks:
      - app-network

  rabbitmq_consumer:
    build:
      context: shopping-cart/
      dockerfile: cart-rabbitmq/Dockerfile
    container_name: rabbitmq_consumer
    depends_on:
      cart_mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      MONGO_URI: "mongodb://cart_mongodb:27017/shopping_cart"
      RABBITMQ_HOST: "rabbitmq"
    networks:
      - app-network

  shopping_cart_service:
    build:
      context: shopping-cart/
      dockerfile: cart-flask/Dockerfile
    container_name: shopping_cart_service
    ports:
      - "8000:8000"
    depends_on:
      cart_mongodb:
          condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      MONGO_URI: "mongodb://cart_mongodb:27017/shopping_cart"
      RABBITMQ_HOST: "rabbitmq"
    networks:
      - app-network

  metrics-service:
    build: 
      context: ./metrics-service
      dockerfile: Dockerfile
    container_name: metrics-service
    ports:
      - "8085:8001"
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB_NAME=auction_metrics
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network
networks:
  app-network:
    driver: bridge

volumes:
  initdb:
  mongodb_data:
  mongo_data:
